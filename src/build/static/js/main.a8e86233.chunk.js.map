{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/article-content.js","components/ArticlesList.js","pages/ArticlesListPage.js","pages/NotFoundPage.js","components/CommentsList.js","components/UpvotesSection.js","components/AddCommentForm.js","pages/ArticlePage.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["HomePage","Fragment","AboutPage","articles","name","title","content","ArticlesList","map","article","key","className","to","substring","ArticlesListPage","ArticleContent","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","articleContent","find","articleInfo","useEffect","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8e86233.chunk.js","sourcesContent":["//Code for home page -> every website landing page\r\n//Create very basic React component called homepage\r\n//First import react\r\nimport React from 'react';\r\n\r\n//Create homepage component\r\nconst HomePage = () => (\r\n    //Since we are returning more than 1 element (and react doesn't allow it [h1 and various p])\r\n    //We need to wrap our elements with a react fragment (before we used a div instead)\r\n    //<React.Fragment> == <>\r\n    <React.Fragment>\r\n        <h1>Hello, welcome to my blog!</h1>\r\n        <p>\r\n            Welcome to my blog! Proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.\r\n        </p>\r\n        <p>\r\n            Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.,\r\n        </p>\r\n        <p>\r\n            Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.,\r\n        </p>\r\n    </React.Fragment>\r\n    //</React.Fragment> == </>\r\n);\r\n\r\n//Export the component so that we can use it anywhere in the app\r\nexport default HomePage;","import React from 'react';\r\n\r\n//Create aboutpage component\r\nconst AboutPage = () => (\r\n    <React.Fragment>\r\n        <h1>About me</h1>\r\n        <p>\r\n            Welcome to my blog! Proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.\r\n        </p>\r\n        <p>\r\n            Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.,\r\n        </p>\r\n        <p>\r\n            Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.,\r\n        </p>\r\n    </React.Fragment>\r\n);\r\n\r\n//Export the component so that we can use it anywhere in the app\r\nexport default AboutPage;","//Import sample content from excercise files\r\n//This is an array [] of javascript objects {}\r\n//Each array in the content variable represents a paragraph in our article\r\nconst articles = [\r\n    {\r\n        name: 'learn-react',\r\n        title: 'The Fastest Way to Learn React',\r\n        content: [\r\n            `Welcome! Today we're going to be talking about the fastest way to\r\n            learn React. We'll be discussing some topics such as proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n        ]\r\n    },    {\r\n        name: 'learn-node',\r\n        title: 'How to Build a Node Server in 10 Minutes',\r\n        content: [\r\n            `In this article, we're going to be talking looking at a very quick way\r\n            to set up a Node.js server. We'll be discussing some topics such as proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n        ]\r\n    },     {\r\n        name: 'my-thoughts-on-resumes',\r\n        title: 'My Thoughts on Resumes',\r\n        content: [\r\n            `Today is the day I talk about something which scares most people: resumes.\r\n            In reality, I'm not sure why people have such a hard time with proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n        ]\r\n    },  \r\n];\r\n\r\nexport default articles;","import React from 'react';\r\n//Import React Link component to be able to navigate to different pages \r\nimport { Link } from 'react-router-dom';\r\n\r\n//We'll get from our components props the articleContent, instead of importing it\r\n//This allows us to use the same component to display different lists of articles \r\nconst ArticlesList = ( { articles }) => (\r\n    //Wrap in a fragment since more than 1 element exists\r\n    <>\r\n        {articles.map((article, key) => (\r\n            <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\r\n                <h3>{article.title}</h3>\r\n                <p>{article.content[0].substring(0, 150)}...</p>\r\n            </Link>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default ArticlesList;","import React from 'react';\r\n//Import articles content\r\nimport ArticleContent from './article-content';\r\n//Import articlesList component\r\nimport ArticlesList from '../components/ArticlesList';\r\n\r\n//Create aboutpage component\r\n//Map the articleContent array into HTML elements (one per article)\r\n//Key element from the map function must ALWAYS be assigned to the outermost element (Link instead of h3, in this case)\r\n//Finally, add a text sample (first 150 characters) to the articles titles\r\n//Due to the article-content structure we can access the first element of the array using [0]\r\n//And then using substring we get the first 150 characters\r\nconst ArticlesListPage = () => (\r\n    <React.Fragment>\r\n        <h1>Articles</h1>\r\n        <ArticlesList articles={ArticleContent}></ArticlesList>\r\n    </React.Fragment>\r\n);\r\n\r\n//Export the component so that we can use it anywhere in the app\r\nexport default ArticlesListPage;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found</h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\n\r\n//Eventhough it is only one element, since it is an array we should wrap it in react fragments\r\nconst CommentsList = ({ comments }) => (\r\n    <>\r\n        <h3>Comments:</h3>\r\n        {comments.map((comment, key) => (\r\n            <div className=\"comment\" key={key}>\r\n                <h4>{comment.username}</h4>\r\n                <p>{comment.text}</p>\r\n            </div>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default CommentsList;","import React from 'react';\r\n\r\n//Use {} instead of () when you need to return a value and/or define a function \r\nconst UpvotesSection = ({ articleName, upvotes, setArticleInfo}) => {\r\n    //Write async function that will be executed when the button is clicked\r\n    const upvoteArticle = async () => {\r\n        //POST request using fetch to update the number of votes in my page\r\n        const result = await fetch(`/api/articles/${articleName}/upvote`, {\r\n            method: \"POST\",\r\n        });\r\n        //Take away extra information (the status code) from the body\r\n        const body = await result.json();\r\n        //Update articleInfo state for our articlePage\r\n        setArticleInfo(body);\r\n    }\r\n\r\n    return (<div id=\"upvotes-section\">\r\n                <button onClick={() => upvoteArticle()}>Add Upvote</button>\r\n                <p>This post has been upvoted {upvotes} times</p>\r\n            </div>);\r\n};\r\n\r\nexport default UpvotesSection;","import React, { useState } from 'react';\r\n\r\nconst AddCommentForm = ({ articleName, setArticleInfo }) => {\r\n    //We need to add an internal state to our form to keep track of the information (values of input and textarea fields)\r\n    //Define state variables\r\n    const [username, setUsername] = useState('');\r\n    const [commentText, setCommentText] = useState('');\r\n    //Link states to the form inputs that they represent\r\n    //This is done by adding a value property to the HTML tags\r\n    //We also add an onchange prop, so that when the value changes a function is executed\r\n    //In this case, we want to update the username and commentText states\r\n    //Finally, we create the async function to be excecuted when the user clicks the button \r\n    //Be very careful in the names used in the body attribute of your fetch call\r\n    //In the server, the name of the comment is text, so since it is different, you should identify it \r\n    //Username is the same, so no need to do username: username\r\n    //We sending a body always use the JSON.stringify function \r\n    //And also, include a header that tells the server the body type (JSON in this case)\r\n    const addComment = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, text: commentText }),\r\n            headers: { 'Content-Type': 'application/json', },\r\n        });\r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n        setUsername('');\r\n        setCommentText('');\r\n    }\r\n\r\n    return (<div id=\"add-comment-form\">\r\n                <h3>Add a Comment</h3>\r\n                <label>\r\n                    Name:\r\n                    <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)}/>\r\n                </label>\r\n                <label>\r\n                    Comment:\r\n                    <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/>\r\n                </label>\r\n                <button onClick={() => addComment()}>Add Comment</button>\r\n            </div>);\r\n};\r\n\r\nexport default AddCommentForm;","//We want to display any article depending on the URL\r\n//To do that we use URL parameter that comes from react router\r\n\r\n//To add state import useState from react\r\n//To perform queries to the backend import useEffect\r\nimport React, { useState, useEffect } from 'react';\r\n//Import article content\r\nimport articleContent from './article-content';\r\n//Import reusable article list component\r\nimport ArticlesList from '../components/ArticlesList';\r\n//Import NotFoundPage\r\nimport NotFoundPage from './NotFoundPage';\r\n//Import commentsList component\r\nimport CommentsList from '../components/CommentsList';\r\n//Import upvotes component\r\nimport UpvotesSection from '../components/UpvotesSection';\r\n//Import CommentFor component\r\nimport AddCommentForm from '../components/AddCommentForm';\r\n\r\n//Basic fetch function syntax\r\n//First parameter is the URL or endpoint\r\n//Second argument is an object that contains the method (GET is default), body and headers\r\n/*fetch('URL', {\r\n    method: '',\r\n    body: '',\r\n    headers: '',\r\n});*/\r\n\r\n//Create aboutpage component\r\n//To catch the URL parameter in our component we use match (implementing destructuring syntax {})\r\n//match contains our current URL and wheter or not it exactly matches our route path\r\n//and a property called params where we will find our URL variable \r\n//To be able to connect to our server and make requests we need to and STATE to our components\r\n//Currently they don't have memory, they just return JSX depending on the props passed to them\r\n//STATE is a place where we can temporarly store information.\r\n//This information will be the information obtained from our server. \r\n//Instead of class notation and extending classes, version 16.8 added React Hooks which allow us to include state to our components\r\n//React Hooks are functions we can call that abstract away from our component the state management process\r\n\r\nconst ArticlePage = ({ match }) => {\r\n    //Get URL parameter out of match\r\n    const name = match.params.name;\r\n    //Find the article from our article's array that has the same name as the one provided in the URL\r\n    //Find works with arrays \r\n    const article = articleContent.find(article => article.name === name);\r\n\r\n    //Without using article-content file\r\n    //Use it in the HTML to verify it is working\r\n    /*return (\r\n        <React.Fragment>\r\n            <h1>This is the {name} article</h1>\r\n        </React.Fragment>\r\n    );*/\r\n    //Using article-content file\r\n    //Covert article information into JSX -> Javascript extention, used for writing code in React\r\n    //We use map function to change from an array of paragraphs to actual HTML p tag elements\r\n    //React requires that we add a key as a second argument to our map function, so we just add it\r\n    //But we also need to use it to distinguish each html element being generated from one another\r\n\r\n    //React hooks syntax\r\n    //ArticleInfo will be the variable filled with the information returned from the server\r\n    //SetArticleInfo will be a function that when called will change the value of article info\r\n    //The empty object {} passed to useState is the initial value that articleInfo will have\r\n    //This is before it is filled with the data from the server\r\n    //However, it is better if we indicate inside the object the default values for the variables \r\n    //we expect to recieve from our request to the server\r\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] }); \r\n    //Request to the backend uses another react hook called useEffect\r\n    //This gives us a place to perform all of the side effects of our component just like fetching data\r\n    //Test code for useEffects\r\n    //Pass an anonymous function as a parameter\r\n    //This function will be called each time our component changes (each time articleInfo information is updated)\r\n    //Inside it you use the setArticleInfo function previously created\r\n    //For testing we pass some dummy data to which we want to set the articleInfo object to\r\n    //To prevent an infinite chain of updates pass [] as a second argument to the useEffect function\r\n    //This array is a list of values that useEffect should watch and if one of them changes, then useEffect triggers again\r\n    //Be aware that if the array is empty it won't update when the information changes (only when the component first loads)\r\n    //Since we want the useEffect to update the page content each time the URL changes\r\n    //we pass to the empty array the name variable, which is the URL segment that will be changing \r\n    useEffect(() => {\r\n        //For testing\r\n        //setArticleInfo({ upvotes: 3 });\r\n\r\n        //Real call to the backend express server using fetch operation (which is async)\r\n        //We can't define the anonymous function inside useEffect as async \r\n        //To fix this, we define an async function\r\n        const fetchData = async () => {\r\n            //Call to the express server without proxy\r\n            //const result = await fetch(`http://localhost:8000/api/articles/${name}`, {});\r\n            //Call to the express server with proxy \r\n            //You can save the typing of http://localhost:8000/ because it is already defined in the proxy property in the package.json file\r\n            const result = await fetch(`/api/articles/${name}`, {\r\n\r\n            });\r\n            //Result variable contains articleInfo, but also status code of the response\r\n            //To get the response body\r\n            const body = await result.json();\r\n            //Set article info using states\r\n            setArticleInfo(body);\r\n            //This triggers a CORS policy error. This error occurs whenever you try to make a request \r\n            //from one origin to another (in development)\r\n            //To fix it, go to package.json \r\n        }\r\n        //And we call it, so that it gets executed\r\n        fetchData();\r\n    }, [name]);\r\n\r\n    //Up until now, if we try to access a non-existent element in the URL we get an error\r\n    //For now we'll fix it with an if statement\r\n    //If article doesn't exist we send to our 404 page\r\n    //if (!article) return <h1>Article does not exist!</h1>\r\n    if (!article) return <NotFoundPage></NotFoundPage>\r\n\r\n    //Create new array that has all the articles except the one I'm currently at\r\n    //Filter returns all the elements that match the condition \r\n    const otherArticles = articleContent.filter(article => article.name !== name);\r\n\r\n    //Add a related article list using my ArticlesList component to the bottom of the page\r\n    //Add a p tag to tell the user how many upvotes an article has\r\n    return (\r\n        <React.Fragment>\r\n            <h1>{article.title}</h1>\r\n            <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo}/>\r\n            {article.content.map((paragraph, key) => (\r\n                <p key={key}>{paragraph}</p>\r\n            ))}\r\n            <CommentsList comments={articleInfo.comments}></CommentsList>\r\n            <AddCommentForm articleName={name} setArticleInfo={setArticleInfo}/>\r\n            <h3>Other articles: </h3>\r\n            <ArticlesList articles={otherArticles} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n//Export the component so that we can use it anywhere in the app\r\nexport default ArticlePage;","import React from 'react';\r\n//In React we don't use anchor elements <a>, instead we import a React component that work as a link\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Create empty component called NavBar\r\n//Each unordered list element will be a link to a different page\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/articles-list\">Articles</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar; ","//Root (main) component for our app\n\nimport './App.css';\n//Import homepage component\nimport HomePage from './pages/HomePage';\n//Install in the terminal angular router: npm install --save react-router-dom\n//Now, add correct router components to be able to navigate from one page to another\n//To begin import browserRouter, route and switch\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n//Import about, articles and article page components\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\n//Import navbar\nimport NavBar from './NavBar';\n//Import NotFoundPage\nimport NotFoundPage from './pages/NotFoundPage';\n\nfunction App() {\n  //Render our homepage app inside the div\n  //<HomePage></HomePage> is the same as <HomePage/>\n  //Wrap our entire app in the router component \n  //This ensures that our entire app is kept up to date with the browsers current URL\n  //Remove the previously create home component and place instead our browser component\n  //Route takes two main props (properties) one is the path that indicates the URL that we want to render a given component at\n  //And a component that specifies the component that we want to render in the given path \n  //By default, a path of / will match all of the paths entered. To prevent this behaivor, we must tell react\n  //that it must look for an exact math, not just the beginning of the path\n  //We use exact prop for this\n  //We add a new route component for each page\n\n  //Style using div\n\n  //URL parameters are defined with :variableName\n\n  //Add route for 404 page. We won't give it a path, so it will match all unspecified routes by default.\n\n  //Switch component makes sure that only one of the routes that we wrap in it is rendered at a time\n  //So it will only render the first route that matches the URL. So we need to put our NotFoundPage at the bottom\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar/>\n        <div id=\"page-body\">\n          <Switch>\n            <Route path=\"/\" component={HomePage} exact/>\n            <Route path=\"/about\" component={AboutPage}/>\n            <Route path=\"/articles-list\" component={ArticlesListPage}/>\n            <Route path=\"/article/:name\" component={ArticlePage}/>\n            <Route component={NotFoundPage}/>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//FETCH is an async package that allows us to make requests to a server just like HTTPClient\n//By default, fetch is not supported by internet explorer or some other browsers\n//To fix this, you must install 'npm install --save whatwg-fetch'\n//And then import it here, in the very first line of the code\nimport 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}