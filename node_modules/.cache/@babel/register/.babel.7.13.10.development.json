{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\jledesmarangel\\\\Documents\\\\General\\\\General certificates\\\\Java Albert\\\\Juan Ma\\\\React Creating and Hosting a Full-Stack Site\\\\my-blog-backend\\\\src\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\jledesmarangel\\\\Documents\\\\General\\\\General certificates\\\\Java Albert\\\\Juan Ma\\\\React Creating and Hosting a Full-Stack Site\\\\my-blog-backend\",\"filename\":\"C:\\\\Users\\\\jledesmarangel\\\\Documents\\\\General\\\\General certificates\\\\Java Albert\\\\Juan Ma\\\\React Creating and Hosting a Full-Stack Site\\\\my-blog-backend\\\\src\\\\server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\jledesmarangel\\\\Documents\\\\General\\\\General certificates\\\\Java Albert\\\\Juan Ma\\\\React Creating and Hosting a Full-Stack Site\\\\my-blog-backend\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.13.10": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend\\src\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend",
      "filename": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend\\src\\server.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend\\src\\server.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend\\src\\server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend\\src\\",
        "sourceFileName": "server.js",
        "jsescOption": {
          "minimal": false
        }
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = _interopRequireDefault(require(\"mongodb\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//Fake data to be used instead of a database. It is a JSON object. \n//The names are the same as our articles in our frontend\n//Add a new property that will keep track of the comments a user does to an article\n//Once DB is running, comment this fake data\n\n/*const articlesInfo = {\r\n    'learn-react': {\r\n        upvotes: 0,\r\n        comments: [],\r\n    },\r\n    'learn-node': {\r\n        upvotes: 0,\r\n        comments: [],\r\n    },\r\n    'my-thoughts-on-resumes': {\r\n        upvotes: 0,\r\n        comments: [],\r\n    },\r\n}*/\n//Create backend app\nvar app = (0, _express[\"default\"])(); //Required when passing into production mode (uploading to AWS)\n//Tell server how to serve static files (like images)\n\napp.use(_express[\"default\"][\"static\"](_path[\"default\"].join(__dirname, '/build'))); //It MUST be added above our routes\n//This will parse the json object we've included in the request body and \n//it adds a body property to the request param of the matching route so that we can extract it from it\n\napp.use(_bodyParser[\"default\"].json()); //Function to enhance code reusability and prevent repetition\n//It will create the connection with the DB and terminate it once the changes (queries) are made\n//The particular changes (getting or updating info) will be passed as a parameter to the function\n//This means we will pass a function (which we'll call operation) as an argument to our function\n//We should also pass the res variable so that we can send a response back to the user\n\nvar withDB = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(operations, res) {\n    var client, db;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _mongodb[\"default\"].connect('mongodb://localhost:27017', {\n              useUnifiedTopology: true\n            });\n\n          case 3:\n            client = _context.sent;\n            db = client.db('my-blog'); //After establishing a connection with our DB we call our function\n            //and pass the recently created db object, so that it can be used internally\n            //Await is used because the operations function (code inside my withDB call in my endpoint) is async\n\n            _context.next = 7;\n            return operations(db);\n\n          case 7:\n            //Disconnect\n            client.close();\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            res.status(500).json({\n              message: 'Error connecting to db',\n              error: _context.t0\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function withDB(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); //After we have our app, we now define different endpoints and what task will be executed when an endpoint is hit\n//1.- When our app recieves a GET request in our /hello endpoint it responds with a message saying hello\n//Second parameter is a callback that recieves two parameters.\n//One is a request object (req) which contains details of the request we just receive \n//The other is a response object (res) which we use to send a response back to whoever send the request\n//res.send sends a request back to whoever hit the endpoint \n//app.get('/hello', (req, res) => res.send('Hello!'));\n//Using URL parameters\n//app.get('/hello/:name', (req, res) => res.send(`Hello ${req.params.name}!`));\n//Test post request\n//Install new module called body parser. This allows our server to extract the JSON data send along with our request\n//In terminal type \"npm install --save body-parser\"\n//app.post('/hello', (req, res) => res.send(`Hello ${req.body.name}!`));\n//Route to get the associated information from an article \n//Add async keyword to callback because we used await inside it. It is required for everything to work properly\n\n\napp.get('/api/articles/:name', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(req, res) {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            //Without reusability (function that connects and disconnects from DB)\n            //Protect everything in a try-catch blog in case something goes wrong with a DB operation\n\n            /*try {\r\n                //Get article name from URL parameters \r\n                const articleName = req.params.name;\r\n                  //Connect to our DB\r\n                //Second argument is an options object (it allows us to change some connection configuration)\r\n                //It is mandatory that we pass the useNewUrlParser attribute (deprecated), now use useUnifiedTopology\r\n                //This connection is async and it returns a promise (a client object from which we can query the db)\r\n                //So we can use JS ES6 async - await which simplifies handling this functions \r\n                const client = await MongoClient.connect('mongodb://localhost:27017', { useUnifiedTopology: true });\r\n                //To query mongodb DB create a db object\r\n                //First argument is database name\r\n                const db = client.db('my-blog');\r\n                  //Now, we query the DB for the required article\r\n                //We must use await because reading from DB is always async\r\n                //First argument is collection name \r\n                //Find one returns one element that matches the criteria specified inside the {}\r\n                const articlesInfo = await db.collection('articles').findOne({ name: articleName });\r\n                //Once we have it, we send it in a response\r\n                //json is the same as send, but it handles JSON data better\r\n                res.status(200).json(articlesInfo);\r\n                  //Close the DB connection\r\n                client.close();        \r\n            } catch(error){\r\n                //Send response to the client saying something went wrong\r\n                //500 -> Internal server error\r\n                //Send a custom message and the error itself\r\n                res.status(500).json({ message: 'Error connecting to db', error });\r\n            }*/\n            //With reusability (function that connects and disconnects from DB)\n            //Wrap up our code inside a call (using arrow functions) to our withDB function\n            //WithDB is a function that receives a function as a parameter\n            //Here we pass a function to withDB using arrow functions\n            //The function performs a specific query to the DB\n            //In order to perfom the query, the instructions need db object \n            //This db object is defined before the arrow here and it corresponds to the \n            //argument being passed to the operations function call inside my withDB function\n            withDB( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(db) {\n                var articleName, articlesInfo;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context2.next = 3;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articlesInfo = _context2.sent;\n                        res.status(200).json(articlesInfo);\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x5) {\n                return _ref3.apply(this, arguments);\n              };\n            }(), res); //We pass the res variable as another parameter. So, in total, we have 1 function and \n            //1 variable as function parameters \n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}()); //Endpoint to update the number of upvotes (likes) in our articles\n\napp.post('/api/articles/:name/upvote', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(req, res) {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            //Without reusability (function that connects and disconnects from DB)\n            //Wrap everything in a try-catch blog\n\n            /*try{\r\n                //Get the name of the article we want to upvote\r\n                const articleName = req.params.name;\r\n                  //Without DB \r\n                //Search in our fake DB for the corresponding article and update the number of votes\r\n                //articlesInfo[articleName].upvotes += 1;\r\n                //Just for development purposes tell the user the current number of upvotes\r\n                //Status -> to tell everything went okay. Send -> to send a message to the user\r\n                //res.status(200).send(`${articleName} now has ${articlesInfo[articleName].upvotes} upvotes!`);\r\n                  //With DB\r\n                //Connect\r\n                const client = await MongoClient.connect('mongodb://localhost:27017', { useUnifiedTopology: true });\r\n                const db = client.db('my-blog');\r\n                //Queries\r\n                //First we find in the DB the corresponding article\r\n                const articleInfo = await db.collection('articles').findOne({ name: articleName });\r\n                //Now, we make a query to update the number of upvotes \r\n                //Second argument are the actual updates that we want to apply to the object\r\n                //Mongodb syntax is as follows:\r\n                await db.collection('articles').updateOne({ name: articleName }, {'$set': {\r\n                    upvotes: articleInfo.upvotes + 1\r\n                    },\r\n                });\r\n                  //Finally, we return the updated version of the recently modified article\r\n                const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\r\n                //Send update information to the client\r\n                res.status(200).json(updatedArticleInfo);\r\n                  //Close DB\r\n                client.close();\r\n            } catch(error) {\r\n                res.status(500).json({ message: 'Error connecting to db', error });\r\n            }*/\n            //With reusability (function that connects and disconnects from DB)\n            withDB( /*#__PURE__*/function () {\n              var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(db) {\n                var articleName, articleInfo, updatedArticleInfo;\n                return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context4.next = 3;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articleInfo = _context4.sent;\n                        _context4.next = 6;\n                        return db.collection('articles').updateOne({\n                          name: articleName\n                        }, {\n                          '$set': {\n                            upvotes: articleInfo.upvotes + 1\n                          }\n                        });\n\n                      case 6:\n                        _context4.next = 8;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 8:\n                        updatedArticleInfo = _context4.sent;\n                        res.status(200).json(updatedArticleInfo);\n\n                      case 10:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function (_x8) {\n                return _ref5.apply(this, arguments);\n              };\n            }(), res);\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}()); //Route that will be in charge of updating the comments to an article\n//We define the JSON body structure first, then implement how to make the request\n\napp.post('/api/articles/:name/add-comment', function (req, res) {\n  //Without reusability (function that connects and disconnects from DB) and DB \n  //Extract information from the body\n\n  /*const { username, text } = req.body;\r\n  //Get the article name from our URL \r\n  const articleName = req.params.name;\r\n  //Add the information to our fake DB\r\n  articlesInfo[articleName].comments.push({username, text}); \r\n  //Just for development purposes we send back a response (the updated article info)\r\n  res.status(200).send(articlesInfo[articleName]);*/\n  //With reusability (function that connects and disconnects from DB) and DB \n  withDB( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(db) {\n      var _req$body, username, text, articleName, articleInfo, updatedArticleInfo;\n\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _req$body = req.body, username = _req$body.username, text = _req$body.text;\n              articleName = req.params.name; //Get the matching article\n\n              _context6.next = 4;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 4:\n              articleInfo = _context6.sent;\n              _context6.next = 7;\n              return db.collection('articles').updateOne({\n                name: articleName\n              }, {\n                '$set': {\n                  //Concat appends to the end of an array\n                  comments: articleInfo.comments.concat({\n                    username: username,\n                    text: text\n                  })\n                }\n              });\n\n            case 7:\n              _context6.next = 9;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 9:\n              updatedArticleInfo = _context6.sent;\n              res.status(200).json(updatedArticleInfo);\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x9) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), res);\n}); //Also required when passing into production mode (uploading to AWS)\n//This tells our app that any other endpoints (URLs) that get typed and that are not above\n//will reroute them to my frontend (because it most likely will match with an endpoint there)\n\napp.get('*', function (req, res) {\n  //Dirname has the current directory path \n  res.sendFile(_path[\"default\"].join(__dirname + '/build/index.html'));\n}); //Just start our server\n//As a first argument it takes the port in which it should be listening\n//As a second argument it takes a callback that is called once the server is actually listening (we'll just log a message to the console)\n\napp.listen(8000, function () {\n  return console.log('Listening on port 8000');\n}); //Finally, on the console we type \"npx babel-node src/server.js\" to tell node js to run our express server\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "express",
        "path",
        "join",
        "__dirname",
        "bodyParser",
        "json",
        "withDB",
        "operations",
        "res",
        "MongoClient",
        "connect",
        "useUnifiedTopology",
        "client",
        "db",
        "close",
        "status",
        "message",
        "error",
        "get",
        "req",
        "articleName",
        "params",
        "name",
        "collection",
        "findOne",
        "articlesInfo",
        "post",
        "articleInfo",
        "updateOne",
        "upvotes",
        "updatedArticleInfo",
        "body",
        "username",
        "text",
        "comments",
        "concat",
        "sendFile",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\jledesmarangel\\Documents\\General\\General certificates\\Java Albert\\Juan Ma\\React Creating and Hosting a Full-Stack Site\\my-blog-backend\\src\\",
      "sourcesContent": [
        "//Entry point for our app\r\n//Create really simple express server that just sends us a response when we send it a request\r\n//Import express server\r\nimport express from 'express';\r\n//Import body parser\r\nimport bodyParser from 'body-parser';\r\n//Install mongodb npm package \"npm install --save mongodb\"\r\n//This allow us to connect to and modify (make queries) our DB from our Express server\r\n//Import it\r\nimport MongoClient from 'mongodb';\r\n//Import path so we can tell our server where to serve static files from\r\nimport path from 'path';\r\n\r\n//Fake data to be used instead of a database. It is a JSON object. \r\n//The names are the same as our articles in our frontend\r\n//Add a new property that will keep track of the comments a user does to an article\r\n//Once DB is running, comment this fake data\r\n/*const articlesInfo = {\r\n    'learn-react': {\r\n        upvotes: 0,\r\n        comments: [],\r\n    },\r\n    'learn-node': {\r\n        upvotes: 0,\r\n        comments: [],\r\n    },\r\n    'my-thoughts-on-resumes': {\r\n        upvotes: 0,\r\n        comments: [],\r\n    },\r\n}*/\r\n\r\n//Create backend app\r\nconst app = express();\r\n\r\n//Required when passing into production mode (uploading to AWS)\r\n//Tell server how to serve static files (like images)\r\napp.use(express.static(path.join(__dirname, '/build')));\r\n\r\n//It MUST be added above our routes\r\n//This will parse the json object we've included in the request body and \r\n//it adds a body property to the request param of the matching route so that we can extract it from it\r\napp.use(bodyParser.json());\r\n\r\n//Function to enhance code reusability and prevent repetition\r\n//It will create the connection with the DB and terminate it once the changes (queries) are made\r\n//The particular changes (getting or updating info) will be passed as a parameter to the function\r\n//This means we will pass a function (which we'll call operation) as an argument to our function\r\n//We should also pass the res variable so that we can send a response back to the user\r\nconst withDB = async (operations, res) => {\r\n    try {\r\n        //Connect\r\n        const client = await MongoClient.connect('mongodb://localhost:27017', { useUnifiedTopology: true });\r\n        const db = client.db('my-blog');\r\n\r\n        //After establishing a connection with our DB we call our function\r\n        //and pass the recently created db object, so that it can be used internally\r\n        //Await is used because the operations function (code inside my withDB call in my endpoint) is async\r\n        await operations(db);\r\n\r\n        //Disconnect\r\n        client.close();        \r\n    } catch(error){\r\n        res.status(500).json({ message: 'Error connecting to db', error });\r\n    }\r\n}\r\n\r\n//After we have our app, we now define different endpoints and what task will be executed when an endpoint is hit\r\n//1.- When our app recieves a GET request in our /hello endpoint it responds with a message saying hello\r\n//Second parameter is a callback that recieves two parameters.\r\n//One is a request object (req) which contains details of the request we just receive \r\n//The other is a response object (res) which we use to send a response back to whoever send the request\r\n//res.send sends a request back to whoever hit the endpoint \r\n//app.get('/hello', (req, res) => res.send('Hello!'));\r\n\r\n//Using URL parameters\r\n//app.get('/hello/:name', (req, res) => res.send(`Hello ${req.params.name}!`));\r\n\r\n//Test post request\r\n//Install new module called body parser. This allows our server to extract the JSON data send along with our request\r\n//In terminal type \"npm install --save body-parser\"\r\n//app.post('/hello', (req, res) => res.send(`Hello ${req.body.name}!`));\r\n\r\n//Route to get the associated information from an article \r\n//Add async keyword to callback because we used await inside it. It is required for everything to work properly\r\napp.get('/api/articles/:name', async (req, res) => {\r\n    //Without reusability (function that connects and disconnects from DB)\r\n    //Protect everything in a try-catch blog in case something goes wrong with a DB operation\r\n    /*try {\r\n        //Get article name from URL parameters \r\n        const articleName = req.params.name;\r\n\r\n        //Connect to our DB\r\n        //Second argument is an options object (it allows us to change some connection configuration)\r\n        //It is mandatory that we pass the useNewUrlParser attribute (deprecated), now use useUnifiedTopology\r\n        //This connection is async and it returns a promise (a client object from which we can query the db)\r\n        //So we can use JS ES6 async - await which simplifies handling this functions \r\n        const client = await MongoClient.connect('mongodb://localhost:27017', { useUnifiedTopology: true });\r\n        //To query mongodb DB create a db object\r\n        //First argument is database name\r\n        const db = client.db('my-blog');\r\n\r\n        //Now, we query the DB for the required article\r\n        //We must use await because reading from DB is always async\r\n        //First argument is collection name \r\n        //Find one returns one element that matches the criteria specified inside the {}\r\n        const articlesInfo = await db.collection('articles').findOne({ name: articleName });\r\n        //Once we have it, we send it in a response\r\n        //json is the same as send, but it handles JSON data better\r\n        res.status(200).json(articlesInfo);\r\n\r\n        //Close the DB connection\r\n        client.close();        \r\n    } catch(error){\r\n        //Send response to the client saying something went wrong\r\n        //500 -> Internal server error\r\n        //Send a custom message and the error itself\r\n        res.status(500).json({ message: 'Error connecting to db', error });\r\n    }*/\r\n\r\n    //With reusability (function that connects and disconnects from DB)\r\n    //Wrap up our code inside a call (using arrow functions) to our withDB function\r\n    //WithDB is a function that receives a function as a parameter\r\n    //Here we pass a function to withDB using arrow functions\r\n    //The function performs a specific query to the DB\r\n    //In order to perfom the query, the instructions need db object \r\n    //This db object is defined before the arrow here and it corresponds to the \r\n    //argument being passed to the operations function call inside my withDB function\r\n    withDB(async db => {\r\n        const articleName = req.params.name;\r\n\r\n        const articlesInfo = await db.collection('articles').findOne({ name: articleName });\r\n        res.status(200).json(articlesInfo);\r\n    }, res);\r\n    //We pass the res variable as another parameter. So, in total, we have 1 function and \r\n    //1 variable as function parameters \r\n});\r\n\r\n//Endpoint to update the number of upvotes (likes) in our articles\r\napp.post('/api/articles/:name/upvote', async (req, res) => {\r\n    //Without reusability (function that connects and disconnects from DB)\r\n    //Wrap everything in a try-catch blog\r\n    /*try{\r\n        //Get the name of the article we want to upvote\r\n        const articleName = req.params.name;\r\n\r\n        //Without DB \r\n        //Search in our fake DB for the corresponding article and update the number of votes\r\n        //articlesInfo[articleName].upvotes += 1;\r\n        //Just for development purposes tell the user the current number of upvotes\r\n        //Status -> to tell everything went okay. Send -> to send a message to the user\r\n        //res.status(200).send(`${articleName} now has ${articlesInfo[articleName].upvotes} upvotes!`);\r\n\r\n        //With DB\r\n        //Connect\r\n        const client = await MongoClient.connect('mongodb://localhost:27017', { useUnifiedTopology: true });\r\n        const db = client.db('my-blog');\r\n        //Queries\r\n        //First we find in the DB the corresponding article\r\n        const articleInfo = await db.collection('articles').findOne({ name: articleName });\r\n        //Now, we make a query to update the number of upvotes \r\n        //Second argument are the actual updates that we want to apply to the object\r\n        //Mongodb syntax is as follows:\r\n        await db.collection('articles').updateOne({ name: articleName }, {'$set': {\r\n            upvotes: articleInfo.upvotes + 1\r\n            },\r\n        });\r\n\r\n        //Finally, we return the updated version of the recently modified article\r\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\r\n        //Send update information to the client\r\n        res.status(200).json(updatedArticleInfo);\r\n\r\n        //Close DB\r\n        client.close();\r\n    } catch(error) {\r\n        res.status(500).json({ message: 'Error connecting to db', error });\r\n    }*/\r\n\r\n    //With reusability (function that connects and disconnects from DB)\r\n    withDB(async db => {\r\n        const articleName = req.params.name;\r\n        const articleInfo = await db.collection('articles').findOne({ name: articleName });\r\n        await db.collection('articles').updateOne({ name: articleName }, {'$set': {\r\n            upvotes: articleInfo.upvotes + 1\r\n            },\r\n        });\r\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\r\n        res.status(200).json(updatedArticleInfo);\r\n    }, res);\r\n});\r\n\r\n//Route that will be in charge of updating the comments to an article\r\n//We define the JSON body structure first, then implement how to make the request\r\napp.post('/api/articles/:name/add-comment', (req, res) => {\r\n    //Without reusability (function that connects and disconnects from DB) and DB \r\n    //Extract information from the body\r\n    /*const { username, text } = req.body;\r\n    //Get the article name from our URL \r\n    const articleName = req.params.name;\r\n    //Add the information to our fake DB\r\n    articlesInfo[articleName].comments.push({username, text}); \r\n    //Just for development purposes we send back a response (the updated article info)\r\n    res.status(200).send(articlesInfo[articleName]);*/\r\n\r\n    //With reusability (function that connects and disconnects from DB) and DB \r\n    withDB(async db => {\r\n        const { username, text } = req.body;\r\n        const articleName = req.params.name;\r\n        //Get the matching article\r\n        const articleInfo = await db.collection('articles').findOne({ name: articleName });\r\n        //Update DB\r\n        await db.collection('articles').updateOne({ name: articleName }, {'$set': {\r\n            //Concat appends to the end of an array\r\n            comments: articleInfo.comments.concat({ username, text })\r\n        }, });\r\n        //Return updated article to the user \r\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\r\n        res.status(200).json(updatedArticleInfo);\r\n    }, res);\r\n});\r\n\r\n//Also required when passing into production mode (uploading to AWS)\r\n//This tells our app that any other endpoints (URLs) that get typed and that are not above\r\n//will reroute them to my frontend (because it most likely will match with an endpoint there)\r\napp.get('*', (req, res) => {\r\n    //Dirname has the current directory path \r\n    res.sendFile(path.join(__dirname + '/build/index.html'));\r\n});\r\n\r\n//Just start our server\r\n//As a first argument it takes the port in which it should be listening\r\n//As a second argument it takes a callback that is called once the server is actually listening (we'll just log a message to the console)\r\napp.listen(8000, () => console.log('Listening on port 8000'));\r\n\r\n//Finally, on the console we type \"npx babel-node src/server.js\" to tell node js to run our express server "
      ]
    },
    "sourceType": "script",
    "mtime": 1616303264961
  }
}